#########################################################
# Brightness
#########################################################

brightness_step_up:
  alias: Step up Light Brightness
  description: Increases brightness, for multiple Lights, following a predefined list of brightness values
  mode: queued
  fields:
    light_entities:
      description: The list of light entities to adjust
      required: true
      selector:
        entity:
          domain: light
          multiple: true
    l_allowed_brightness:
      description: Predefined list of brightness values. Must be sorted!
      required: true
      default: '[4, 12, 28, 49, 74, 103, 135, 169, 206, 255]'
      selector:
        text: {}
  sequence:
    - variables:
        l_allowed_brightness: '{{ l_allowed_brightness | from_json | sort }}'
        l_current_brightness: '{{ light_entities | map(''state_attr'', ''brightness'')
          | map(''int'', 0) | list }}'
        current_avg_brightness: '{{ (l_current_brightness | sum / l_current_brightness
          | length) | int(0) }}'
        l_higher_allowed_brightness: '{{ l_allowed_brightness | select(''gt'', current_avg_brightness)
          | list }}'
        new_brightness: '{{ l_higher_allowed_brightness[0] if l_higher_allowed_brightness
          else l_allowed_brightness[-1] }}'
    - service: light.turn_on
      target:
        entity_id: '{{ light_entities }}'
      data:
        brightness: '{{ new_brightness }}'
        transition: 0.5 # Not sure if this is working...
    - service: logbook.log
      data:
        name: Brightness Change
        message: "Brightness of {{ light_entities }} increased from {{ current_avg_brightness }} to {{ new_brightness }}"


brightness_step_down:
  alias: Step Down Light Brightness
  description: Decreases brightness, for multiple Lights, following a predefined list of brightness values
  mode: queued
  fields:
    light_entities:
      description: The list of light entities to adjust
      required: true
      selector:
        entity:
          domain: light
          multiple: true
    l_allowed_brightness:
      description: Predefined list of brightness values. Must be sorted!
      required: true
      default: '[4, 12, 28, 49, 74, 103, 135, 169, 206, 255]'
      selector:
        text: {}
  sequence:
    - variables:
        l_allowed_brightness: '{{ l_allowed_brightness | from_json | sort }}'
        l_current_brightness: '{{ light_entities | map(''state_attr'', ''brightness'')
          | map(''int'', 0) | list }}'
        current_avg_brightness: '{{ (l_current_brightness | sum / l_current_brightness
          | length) | int(0) }}'
        l_lower_allowed_brightness: '{{ l_allowed_brightness | select(''lt'', current_avg_brightness)
          | list }}'
        new_brightness: '{{ l_lower_allowed_brightness[-1] if l_lower_allowed_brightness
          else l_allowed_brightness[0] }}'
    - service: light.turn_on
      target:
        entity_id: '{{ light_entities }}'
      data:
        brightness: '{{ new_brightness }}'
        transition: 0.5  # Not sure if this is working...
    - service: logbook.log
      data:
        name: Brightness Change
        message: "Brightness of {{ light_entities }} decreased from {{ current_avg_brightness }} to {{ new_brightness }}"

#########################################################
# Color Temperature
#########################################################

increase_color_temp:
  alias: Increase Color Temperature
  description: Increases color temperature by a given increment. Can work for several entities at the same time, but please prefer using a group.
  mode: queued
  fields:
    light_entities:
      description: The list of light entities to adjust
      required: true
      selector:
        entity:
          domain: light
          multiple: true
    increment_kelvin:
      description: The amount to increase color temperature each time
      required: true
      default: 500
      selector:
        number:
          min: 0
          max: 3000
          unit_of_measurement: "K"
  sequence:
    - variables:
        current_avg_colortemp: '{{ (light_entities | map("state_attr", "color_temp_kelvin") | map("int", 0) | sum) / (light_entities | length) | int }}'
        new_colortemp: '{{ current_avg_colortemp + increment_kelvin }}'
    - service: light.turn_on
      target:
        entity_id: '{{ light_entities }}'
      data:
        color_temp_kelvin: '{{ new_colortemp }}'
        transition: 0.5  # Not sure if this is working...
    - service: logbook.log
      data:
        name: Color Temperature Increase
        message: "of {{ light_entities }} from {{ current_avg_colortemp }} to {{ new_colortemp }}"


decrease_color_temp:
  alias: Decrease Color Temperature
  description: Decreases color temperature by a given decrement. Can work for several entities at the same time, but please prefer using a group.
  mode: queued
  fields:
    light_entities:
      description: The list of light entities to adjust
      required: true
      selector:
        entity:
          domain: light
          multiple: true
    decrement_kelvin:
      description: The amount to decrease color temperature each time
      required: true
      default: 500
      selector:
        number:
          min: 0
          max: 3000
          unit_of_measurement: "K"
  sequence:
    - variables:
        current_avg_colortemp: '{{ (light_entities | map("state_attr", "color_temp_kelvin") | map("int", 0) | sum) / (light_entities | length) | int }}'
        new_colortemp: '{{ current_avg_colortemp - decrement_kelvin }}'
    - service: light.turn_on
      target:
        entity_id: '{{ light_entities }}'
      data:
        color_temp_kelvin: '{{ new_colortemp }}'
        transition: 0.5  # Not sure if this is working...
    - service: logbook.log
      data:
        name: Color Temperature Decreases
        message: "of {{ light_entities }} from {{ current_avg_colortemp }} to {{ new_colortemp }}"
