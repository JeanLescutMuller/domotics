decrease_color_temp:
  alias: Decrease Color Temperature
  description: Decreases color temperature by a given decrement, but not below a specified
    minimum
  mode: queued
  fields:
    light_entity:
      description: The light entity to adjust
      example: light.living_room
      required: true
      selector:
        entity:
          domain: light
    min_temp_kelvin:
      description: The minimum color temperature limit
      example: 2200
      required: false
      default: 2200
      selector:
        number:
          min: 1500
          max: 4000
          step: 50
    decrement_kelvin:
      description: The amount to decrease color temperature each time
      example: 200
      required: false
      default: 200
      selector:
        number:
          min: 50
          max: 1000
          step: 50
  sequence:
  - service: light.turn_on
    target:
      entity_id: '{{ light_entity }}'
    data:
      color_temp_kelvin: "{% set min_temp = min_temp_kelvin | default(2200) | int
        %} {% set decrement = decrement_kelvin | default(200) | int %} {% set current_temp
        = state_attr(light_entity, 'color_temp_kelvin') | int %}\n{% if current_temp
        == none or current_temp < (min_temp + decrement) %}\n  {{ min_temp }}\n{%
        else %}\n  {{ current_temp - decrement }}\n{% endif %}\n"


increase_color_temp:
  alias: Increase Color Temperature
  description: Increases color temperature by a given increment, but not above a specified
    maximum
  mode: queued
  fields:
    light_entity:
      description: The light entity to adjust
      example: light.living_room
      required: true
      selector:
        entity:
          domain: light
    max_temp_kelvin:
      description: The maximum color temperature limit
      example: 6500
      required: false
      default: 6500
      selector:
        number:
          min: 2000
          max: 10000
          step: 50
    increment_kelvin:
      description: The amount to increase color temperature each time
      example: 200
      required: false
      default: 200
      selector:
        number:
          min: 50
          max: 1000
          step: 50
  sequence:
  - service: light.turn_on
    target:
      entity_id: '{{ light_entity }}'
    data:
      color_temp_kelvin: "{% set max_temp = max_temp_kelvin | default(6500) | int
        %} {% set increment = increment_kelvin | default(200) | int %} {% set current_temp
        = state_attr(light_entity, 'color_temp_kelvin') | int %}\n{% if current_temp
        == none or current_temp > (max_temp - increment) %}\n  {{ max_temp }}\n{%
        else %}\n  {{ current_temp + increment }}\n{% endif %}\n"


decrease_brightness:
  alias: Decrease Brightness
  description: Decreases brightness by a given decrement, but not below a specified
    minimum
  mode: queued
  fields:
    light_entity:
      description: The light entity to adjust
      example: light.living_room
      required: true
      selector:
        entity:
          domain: light
    min_brightness:
      description: The minimum brightness level
      example: 0
      required: false
      default: 0
      selector:
        number:
          min: 0
          max: 255
          step: 1
    decrement_brightness:
      description: The amount to decrease brightness each time
      example: 30
      required: false
      default: 30
      selector:
        number:
          min: 1
          max: 255
          step: 1
  sequence:
  - service: light.turn_on
    target:
      entity_id: '{{ light_entity }}'
    data:
      brightness: "{% set min_brightness = min_brightness | default(0) | int %} {%
        set decrement = decrement_brightness | default(30) | int %} {% set current_brightness
        = state_attr(light_entity, 'brightness') | int %}\n{% if current_brightness
        == none or current_brightness < decrement %}\n  {{ min_brightness }}\n{% else
        %}\n  {{ current_brightness - decrement }}\n{% endif %}\n"


increase_brightness:
  alias: Increase Brightness
  description: Increases brightness by a given increment, but not above a specified
    maximum
  mode: queued
  fields:
    light_entity:
      description: The light entity to adjust
      example: light.living_room
      required: true
      selector:
        entity:
          domain: light
    max_brightness:
      description: The maximum brightness level
      example: 255
      required: false
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1
    increment_brightness:
      description: The amount to increase brightness each time
      example: 30
      required: false
      default: 30
      selector:
        number:
          min: 1
          max: 255
          step: 1
  sequence:
  - service: light.turn_on
    target:
      entity_id: '{{ light_entity }}'
    data:
      brightness: "{% set max_brightness = max_brightness | default(255) | int %}
        {% set increment = increment_brightness | default(30) | int %} {% set current_brightness
        = state_attr(light_entity, 'brightness') | int %}\n{% if current_brightness
        == none or current_brightness > (max_brightness - increment) %}\n  {{ max_brightness
        }}\n{% else %}\n  {{ current_brightness + increment }}\n{% endif %}\n"


increase_brightness_predefined:
  alias: Increase Brightness (Predefined List)
  description: Increases brightness following a predefined list of values
  mode: queued
  fields:
    light_entity:
      description: The light entity to adjust
      example: light.living_room
      required: true
      selector:
        entity:
          domain: light
    brightness_list:
      description: Predefined list of brightness values.
      required: true
      default: '[4, 12, 28, 49, 74, 103, 135, 169, 206, 255]'
      selector:
        text: {}
  sequence:
  - variables:
      brightness_list: '{{ brightness_list | from_json | sort }}'
      current_brightness: '{{ state_attr(light_entity, ''brightness'') | int(0) }}'
      higher_values: '{{ brightness_list | select(''gt'', current_brightness) | list
        }}'
      new_brightness: '{{ higher_values[0] if higher_values else brightness_list[-1]
        }}'
  - service: light.turn_on
    target:
      entity_id: '{{ light_entity }}'
    data:
      brightness: '{{ new_brightness }}'
  - service: logbook.log
    data:
      name: Increase Brightness
      message: of {{ light_entity }} from {{ current_brightness }} to {{ new_brightness
        }}


decrease_brightness_predefined:
  alias: Decrease Brightness (Predefined List)
  description: Decreases brightness following a predefined list of values
  mode: queued
  fields:
    light_entity:
      description: The light entity to adjust
      example: light.living_room
      required: true
      selector:
        entity:
          domain: light
    brightness_list:
      description: Predefined list of brightness values.
      required: true
      default: '[4, 12, 28, 49, 74, 103, 135, 169, 206, 255]'
      selector:
        text: {}
  sequence:
  - variables:
      brightness_list: '{{ brightness_list | from_json | sort }}'
      current_brightness: '{{ state_attr(light_entity, ''brightness'') | int(0) }}'
      lower_values: '{{ brightness_list | select(''lt'', current_brightness) | list
        }}'
      new_brightness: '{{ lower_values[-1] if lower_values else brightness_list[0]
        }}'
  - service: light.turn_on
    target:
      entity_id: '{{ light_entity }}'
    data:
      brightness: '{{ new_brightness }}'
  - service: logbook.log
    data:
      name: Decrease Brightness
      message: of {{ light_entity }} from {{ current_brightness }} to {{ new_brightness
        }}


increase_group_brightness:

  alias: Increase Group Brightness
  description: Increases brightness in a group, following a predefined list of brightness values
  mode: queued

  fields:
    light_group:
      description: The group of light entities to adjust
      required: true
      selector:
        entity:
          domain: group
    l_allowed_brightness:
      description: Predefined list of brightness values. Must be sorted!
      required: true
      default: "[4, 12, 28, 49, 74, 103, 135, 169, 206, 255]"
      selector:
        text: {}

  sequence:
    - variables:
        l_allowed_brightness: "{{ l_allowed_brightness | from_json | sort }}"
        avg_current_brightness: "{{ state_attr(light_group, 'entity_id') | map('state_attr', 'brightness') | select('defined') | list | average }}"
        l_higher_allowed_brightness: "{{ l_allowed_brightness | select('gt', avg_current_brightness) | list }}"
        new_brightness: "{{ l_higher_allowed_brightness[0] if l_higher_allowed_brightness else l_allowed_brightness[-1] }}"
    - service: logbook.log
      data:
        name: "Brightness Change"
        message: "Brightness of {{ light_group }} increased from {{ avg_current_brightness }} to {{ new_brightness }}"
    - service: light.turn_on
      target:
        entity_id: "{{ light_group }}"
      data:
        brightness: "{{ new_brightness }}"


  increase_multiple_brightness:
  alias: Increase Multiple Brightness
  description: Increases brightness for up to three lights simultaneously, following a predefined list of brightness values
  mode: single
  fields:
    light_entities:
      description: The list of light entities to adjust
      required: true
      selector:
        entity:
          domain: light
          multiple: true
    l_allowed_brightness:
      description: Predefined list of brightness values. Must be sorted!
      required: true
      default: '[4, 12, 28, 49, 74, 103, 135, 169, 206, 255]'
      selector:
        text: {}
  sequence:
    - variables:
        l_allowed_brightness: '{{ l_allowed_brightness | from_json | sort }}'
        l_current_brightness: '{{ light_entities | map(''state_attr'', ''brightness'')
          | map(''int'', 0) | list }}'
        avg_current_brightness: '{{ (l_current_brightness | sum / l_current_brightness
          | length) | int(0) }}'
        l_higher_allowed_brightness: '{{ l_allowed_brightness | select(''gt'', avg_current_brightness)
          | list }}'
        new_brightness: '{{ l_higher_allowed_brightness[0] if l_higher_allowed_brightness
          else l_allowed_brightness[-1] }}'
    - service: light.turn_on
      target:
        entity_id: '{{ light_entities }}'
      data:
        brightness: '{{ new_brightness }}'
        transition: 0.5
    - service: logbook.log
      data:
        name: Brightness Change
        message: Brightness of {{ light_entities }} increased from {{ avg_current_brightness }} to {{ new_brightness }}


